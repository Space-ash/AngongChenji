/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/settingpage_screen/SettingPageViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

SettingPageViewBase::SettingPageViewBase() :
    buttonCallback(this, &SettingPageViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &SettingPageViewBase::sliderValueChangedCallbackHandler)
{
    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_SETTINGPAGE_BACKGROUND_ID));
    add(image1);

    toggleButton1.setXY(265, 186);
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_PAGE_ID), touchgfx::Bitmap(BITMAP_RIGHT_PAGE_CLICK_ID));
    toggleButton1.setAction(buttonCallback);
    add(toggleButton1);

    sliderScreenBacklight.setXY(4, 201);
    sliderScreenBacklight.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_ROUNDED_LIGHT_ID));
    sliderScreenBacklight.setupHorizontalSlider(16, 11, 0, 0, 198);
    sliderScreenBacklight.setValueRange(5, 100);
    sliderScreenBacklight.setValue(50);
    sliderScreenBacklight.setNewValueCallback(sliderValueChangedCallback);
    add(sliderScreenBacklight);

    textBackLight.setXY(173, 166);
    textBackLight.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textBackLight.setLinespacing(0);
    Unicode::snprintf(textBackLightBuffer, TEXTBACKLIGHT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M1OD).getText());
    textBackLight.setWildcard(textBackLightBuffer);
    textBackLight.resizeToCurrentText();
    textBackLight.setTypedText(touchgfx::TypedText(T_BACKLIGHT));
    add(textBackLight);

    textChipTemp.setXY(81, 92);
    textChipTemp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textChipTemp.setLinespacing(0);
    Unicode::snprintf(textChipTempBuffer, TEXTCHIPTEMP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_H89Z).getText());
    textChipTemp.setWildcard(textChipTempBuffer);
    textChipTemp.resizeToCurrentText();
    textChipTemp.setTypedText(touchgfx::TypedText(T_CHIPTEMP));
    add(textChipTemp);

    textChipVref.setXY(175, 92);
    textChipVref.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textChipVref.setLinespacing(0);
    touchgfx::Unicode::snprintf(textChipVrefBuffer1, TEXTCHIPVREFBUFFER1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7TKU).getText());
    textChipVref.setWildcard1(textChipVrefBuffer1);
    touchgfx::Unicode::snprintf(textChipVrefBuffer2, TEXTCHIPVREFBUFFER2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_71NJ).getText());
    textChipVref.setWildcard2(textChipVrefBuffer2);
    textChipVref.resizeToCurrentText();
    textChipVref.setTypedText(touchgfx::TypedText(T_CHIPVREF));
    add(textChipVref);

    textChipVbat.setXY(266, 92);
    textChipVbat.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textChipVbat.setLinespacing(0);
    touchgfx::Unicode::snprintf(textChipVbatBuffer1, TEXTCHIPVBATBUFFER1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NKAO).getText());
    textChipVbat.setWildcard1(textChipVbatBuffer1);
    touchgfx::Unicode::snprintf(textChipVbatBuffer2, TEXTCHIPVBATBUFFER2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8KMQ).getText());
    textChipVbat.setWildcard2(textChipVbatBuffer2);
    textChipVbat.resizeToCurrentText();
    textChipVbat.setTypedText(touchgfx::TypedText(T_CHIPVBAT));
    add(textChipVbat);
}

SettingPageViewBase::~SettingPageViewBase()
{

}

void SettingPageViewBase::setupScreen()
{

}

void SettingPageViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &toggleButton1)
    {
        //Interaction1
        //When toggleButton1 clicked change screen to ApplicationPage
        //Go to ApplicationPage with no screen transition
        application().gotoApplicationPageScreenNoTransition();
    }
}

void SettingPageViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sliderScreenBacklight)
    {
        //sliderInteraction
        //When sliderScreenBacklight value changed call virtual function
        //Call newBacklightValueHandler
        newBacklightValueHandler(value);
    }
}
